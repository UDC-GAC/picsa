{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PICSA","text":"<p>PICSA stands for Productivity Increase by Cloud Serverless Automation</p> <p>The main contributions of PICSA are: </p> <ol> <li> <p>The middleware of FaaS oriented to allow a high-level productive programming, reduce heavy-loaded applications runtime and optimize cost/resources efficiency.</p> </li> <li> <p>The extension of BDWatchdog to monitor cloud activity, which, combined with an information system, will allow automatic reporting on the target use cases to be tackled. </p> </li> </ol>"},{"location":"bdwatchdogfaas/bdwatchdogfaas/","title":"BDWatchdogFaaS","text":"<p>BDWatchdogFaaS is a real-time monitoring tool for Funcions-as-a-Service in both AWS and Azure.</p> <p> </p> BDWatchdogFaaS logo <p>BDWatchdogFaaS processs the logs from Lambda and Azure Functions in order to build and store a common model to both providers, allowing to consult, analyze and monitor function logs from AWS and Azure indistinctly. The transformation of logs into the common model is done by a FaaS in the corresponding provider, which in near real-time ingests, processes and sends the data to a common datalake. In addition, the data is forwarded to a Power BI dashboard so that the serverless functions can be monitored easily.</p>"},{"location":"bdwatchdogfaas/bdwatchdogfaas/#deployment","title":"Deployment","text":"<p>BDWatchdogFaaS is available in the AWS Serverless Application Repository (SAR), so you can deploy it easily in your environment.</p> <p>Click here to start using BDWatchdogFaaS.</p>"},{"location":"bdwatchdogfaas/bdwatchdogfaas/#architecture","title":"Architecture","text":"<p>BDWatchdogFaaS is composed of 4 different modules:</p> <ul> <li>Azure monitoring module</li> <li>AWS monitoring module</li> <li>Stats module</li> <li>Visualization module</li> </ul> <p> </p> BDWatchdogFaaS architecture"},{"location":"bdwatchdogfaas/bdwatchdogfaas/#azure","title":"Azure","text":"<p>This module deals with the monitoring of Azure Functions and it has been implemented completely using Azure services. When an Azure Function is executed, Azure automatically generate a series of logs which are stored in Application Insights, the APM tool provided by Azure.</p> <p>Once in Application Insights, logs are immediately sent to a queue of EvenHub, which work as trigger to a Azure Function, called AzureLogsForwarder.</p> <p>This FaaS handles the task of processing logs to extract the relevant information, and then forwards it to the statistics and visualization modules.</p> <p> </p> Azure monitoring module"},{"location":"bdwatchdogfaas/bdwatchdogfaas/#aws","title":"AWS","text":"<p>This module deals with the monitoring of AWS Lambda. Analogous to the Azure monitoring module, this module has been built on top of AWS services.</p> <p>First, when a Lambda is executed, AWS registers the logs in a log group of Cloudwatch, the monitoring service of AWS. Using a subscription filter logs are automatically sent to a Lambda function, called AWSLogsForwarder, which is trigger as response to the incoming data. </p> <p> </p> AWS monitoring module"},{"location":"bdwatchdogfaas/bdwatchdogfaas/#stats","title":"Stats","text":"<p>This module has been developed to store the logs processed by the previous modules in an AWS DynamoDB Serverless table. DynamoDB is a fully managed, key-value NoSQL database designed to run high-performance applications provided by AWS.</p> <p>The table keeps all processed logs from both Azure Functions and AWS Lambda in a single point, so that another Lambda function, LogStatsForwarder, can read the data and obtain overall statistics about the FaaS being monitored in both cloud providers. These statistics are forwarded to the visualization module as well.</p> <p> </p> Stats module"},{"location":"bdwatchdogfaas/bdwatchdogfaas/#visualization","title":"Visualization","text":"<p>Finally, the visualization module is built making use of the capabilities for real-time visualization of streaming datasets in Power BI Service. This application allows the developers to define streaming datasets that can be feeded through an API, sending the data using HTTP requests.</p> <p> </p> Visualization module <p>In order to work with BDWatchdog, you have to create these 4 streaming datasets in Power BI Service:</p> <ol> <li> <p>Azure logs <pre><code>[\n    {\n    \"id\" :\"AAAAA555555\",\n    \"source\" :\"AAAAA555555\",\n    \"timestamp\" :\"2023-09-04T19:14:13.406Z\",\n    \"funcName\" :\"AAAAA555555\",\n    \"duration\" :98.6,\n    \"result\" :\"AAAAA555555\",\n    \"operationId\" :\"AAAAA555555\"\n    }\n]\n</code></pre></p> </li> <li> <p>Lambda logs <pre><code>[\n    {\n    \"id\" :\"AAAAA555555\",\n    \"source\" :\"AAAAA555555\",\n    \"timestamp\" :\"2023-09-04T19:12:33.210Z\",\n    \"duration\" :98.6,\n    \"billedDuration\" :98.6,\n    \"memorySize\" :98.6,\n    \"memoryUsed\" :98.6,\n    \"operationId\" :\"AAAAA555555\",\n    \"result\" :\"AAAAA555555\",\n    \"funcName\" :\"AAAAA555555\"\n    }\n]\n</code></pre></p> </li> <li> <p>Common logs <pre><code>[\n    {\n    \"id\" :\"AAAAA555555\",\n    \"source\" :\"AAAAA555555\",\n    \"timestamp\" :\"2023-09-04T19:15:44.764Z\",\n    \"funcName\" :\"AAAAA555555\",\n    \"duration\" :98.6,\n    \"result\" :\"AAAAA555555\",\n    \"operationId\" :\"AAAAA555555\"\n    }\n]\n</code></pre></p> </li> <li> <p>Stats <pre><code>[\n    {\n    \"totalInvocations\" :98.6,\n    \"totalSuccesses\" :98.6,\n    \"totalFailures\" :98.6,\n    \"percentageSuccess\" :98.6,\n    \"avgDuration\" :98.6,\n    \"avgSuccessDuration\" :98.6,\n    \"avgFailureDuration\" :98.6,\n    \"avgMemory\" :98.6,\n    \"avgSuccessMemory\" :98.6,\n    \"avgFailureMemory\" :98.6,\n    \"timestamp\" :\"2023-09-04T19:17:00.077Z\",\n    \"avgMemorySize\" :98.6,\n    \"avgSuccessMemorySize\" :98.6,\n    \"avgFailureMemorySize\" :98.6\n    }\n]\n</code></pre></p> </li> </ol>"}]}